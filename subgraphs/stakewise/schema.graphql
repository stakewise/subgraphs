"""
Pool settings
"""
type Pool @entity {
    "Pool contract address"
    id: ID!

    "The minimal deposit amount considered for the activation"
    minActivatingDeposit: BigDecimal!

    "The pending validators limit percentage. When it's exceeded, the deposits will be set for the activation"
    pendingValidatorsLimit: BigInt!

    "The total amount of pending validators"
    pendingValidators: BigInt!

    "The total amount of activated validators"
    activatedValidators: BigInt!
}

"""
Global Settings
"""
type Settings @entity {
    "Set to 1"
    id: ID!

    "Defines whether the Pool contract is paused"
    poolPaused: Boolean!

    "Defines whether the PoolValidators contract is paused"
    poolValidatorsPaused: Boolean!

    "Defines whether the MerkleDistributor contract is paused"
    merkleDistributorPaused: Boolean!

    "Defines whether the VestingEscrowFactory contract is paused"
    vestingEscrowFactoryPaused: Boolean!

    "Defines whether the Oracles contract is paused"
    oraclesPaused: Boolean!

    "Defines whether the Operators' Revenue Sharing contract is paused"
    operatorsRevenueSharingPaused: Boolean!

    "Defines whether the Partners' Revenue Sharing contract is paused"
    partnersRevenueSharingPaused: Boolean!

    "Defines whether the StakeWise Token is paused"
    stakeWiseTokenPaused: Boolean!

    "Defines whether the Staked ETH Token is paused"
    stakedEthTokenPaused: Boolean!

    "Defines whether the Reward ETH Token is paused"
    rewardEthTokenPaused: Boolean!

    "The last rewards update timestamp"
    rewardsUpdatedAtTimestamp: BigInt!

    "The current reward per staked ETH token"
    rewardPerStakedEthToken: BigDecimal!
}

"""
Pool deposit activation
"""
type DepositActivation @entity {
    "Set to `account-validatorIndex`"
    id: ID!

    "The address of the account that has pending activation"
    account: Bytes!

    "The validator index that is handling the deposit"
    validatorIndex: BigInt!

    "The amount that will be activated"
    amount: BigDecimal!
}

"""
StakeWise Operator
"""
type Operator @entity {
    "The operator address"
    id: ID!

    "The initialize merkle root used to verify validator registration initialization"
    initializeMerkleRoot: Bytes!

    "The initialize merkle root proofs link"
    initializeMerkleProofs: String!

    "The finalize merkle root used to verify validator registration finalization"
    finalizeMerkleRoot: Bytes!

    "The finalize merkle root proofs link"
    finalizeMerkleProofs: String!

    "The collateral amount deposited for ensuring the validator registration process"
    collateral: BigDecimal!

    "The operator validators"
    validators: [Validator!]! @derivedFrom(field: "operator")
}

"""
StakeWise Oracle
"""
type Oracle @entity {
    "The oracle address"
    id: ID!

    "The oracle rewards votes source"
    rewardVotesSource: String!

    "The oracle validators votes source"
    validatorVotesSource: String!
}

"""
Enum to track status of the validator registration.
Uninitialized - validator has not been initialized.
Initialized - 1 ether deposit has been made to the ETH2 registration contract for the public key.
Finalized - 31 ether deposit has been made to the ETH2 registration contract for the public key.
Failed - 1 ether deposit has failed as it was assigned to the different from the protocol's withdrawal key.
"""
enum RegistrationStatus { Uninitialized, Initialized, Finalized, Failed }

"""
StakeWise Validator
"""
type Validator @entity {
    "The validator public key"
    id: ID!

    "The validator operator"
    operator: Operator!

    "The validator registration status"
    registrationStatus: RegistrationStatus!
}

"""
Merkle Distributor settings
"""
type MerkleDistributor @entity {
    "MerkleDistributor contract address"
    id: ID!

    "The current merkle root"
    merkleRoot: Bytes!

    "The current merkle root proofs location"
    merkleProofs: String!

    "The current merkle root update block number"
    updatedAtBlock: BigInt!

    "The current merkle root update timestamp"
    updatedAtTimestamp: BigInt!
}

"""
Tokens distribution of the Merkle Distributor
"""
type TokenDistribution @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The address of the token to distribute"
    token: Bytes!

    "The address of the beneficiary"
    beneficiary: Bytes!

    "The amount to distribute"
    amount: BigDecimal!

    "The distribution start block number"
    startedAtBlock: BigInt!

    "The distribution start timestamp"
    startedAtTimestamp: BigInt!

    "The distribution end block number"
    endedAtBlock: BigInt!
}

"""
Tokens claim from the Merkle Distributor
"""
type MerkleDistributorClaim @entity {
    "Set to `account address - merkle root`"
    id: ID!

    "The address of the beneficiary"
    account: Bytes!

    "The merkle root of the claim"
    merkleRoot: Bytes!

    "The proofs of the merkle root"
    merkleProofs: String!
}

"""
The vesting escrow
"""
type VestingEscrow @entity {
    "The address of the vesting escrow contract"
    id: ID!

    "The address of the escrow admin"
    admin: Bytes!

    "The address of the distributed token"
    token: Bytes!

    "The address of the tokens claimer"
    claimer: Bytes!

    "The address of the tokens beneficiary"
    beneficiary: Bytes!

    "The total amount of tokens locked"
    totalAmount: BigDecimal!

    "The total amount of tokens claimed"
    totalClaimed: BigDecimal!

    "The vesting start timestamp"
    startTimestamp: BigInt!

    "The vesting end timestamp"
    endTimestamp: BigInt!

    "The cliff length"
    cliffLength: BigInt!

    "Defines whether the contract is paused"
    isPaused: Boolean!
}

"""
Generic revenue sharing contract
"""
interface RevenueSharing {
    "The address of the revenue sharing contract"
    id: ID!

    "The total number of revenue points"
    totalPoints: BigDecimal!

    "The total rETH2 reward accumulated"
    totalReward: BigDecimal!

    "The reward ETH per point used for every account's reward calculation"
    rewardPerPoint: BigDecimal!
}

"""
Generic revenue sharing account
"""
interface RevenueSharingAccount {
    "The address of the beneficiary"
    id: ID!

    "The total amount of ETH contributed"
    amount: BigDecimal!

    "The revenue share configured - up to 10000 (100.00%)"
    revenueShare: BigDecimal!,

    "The total unclaimed rewards amount in last checkpoint"
    unclaimedReward: BigDecimal!,

    "The reward per point in last checkpoint"
    rewardPerPoint:  BigDecimal!
}

"""
Operators revenue sharing settings
"""
type OperatorsRevenueSharing implements RevenueSharing @entity {
    id: ID!
    totalPoints: BigDecimal!
    totalReward: BigDecimal!
    rewardPerPoint: BigDecimal!

    "The array of revenue sharing accounts"
    accounts: [OperatorRevenueSharingAccount!]! @derivedFrom(field: "contract")
}


"""
Operator revenue sharing account
"""
type OperatorRevenueSharingAccount implements RevenueSharingAccount @entity {
    id: ID!
    amount: BigDecimal!
    revenueShare: BigDecimal!,
    unclaimedReward: BigDecimal!,
    rewardPerPoint:  BigDecimal!

    "The address of the operators' revenue sharing contract"
    contract: OperatorsRevenueSharing!
}

"""
Partners revenue sharing settings
"""
type PartnersRevenueSharing implements RevenueSharing @entity {
    id: ID!
    totalPoints: BigDecimal!
    totalReward: BigDecimal!
    rewardPerPoint: BigDecimal!

    "The array of revenue sharing accounts"
    accounts: [PartnerRevenueSharingAccount!]! @derivedFrom(field: "contract")
}


"""
Partner revenue sharing account
"""
type PartnerRevenueSharingAccount implements RevenueSharingAccount @entity {
    id: ID!
    amount: BigDecimal!
    revenueShare: BigDecimal!,
    unclaimedReward: BigDecimal!,
    rewardPerPoint:  BigDecimal!

    "The address of the partners' revenue sharing contract"
    contract: PartnersRevenueSharing!
}

"""
StakeWise token holder
"""
type StakeWiseTokenHolder @entity {
    "The address of the StakeWise token holder"
    id: ID!

    "The holder's balance"
    balance: BigDecimal!

    "The points are calculated based on the balance and the time passed since the last balance update"
    holdingPoints: BigDecimal!

    "The last balance update timestamp"
    updatedAtTimestamp: BigInt!
}

"""
Staked ETH token holder
"""
type StakedEthTokenHolder @entity {
    "The address of the Staked ETH token holder"
    id: ID!

    "The holder's balance"
    balance: BigDecimal!
}

"""
Reward ETH token holder
"""
type RewardEthTokenHolder @entity {
    "The address of the Reward ETH token holder"
    id: ID!

    "The last checkpoint's balance"
    checkpointBalance: BigDecimal!

    "The last checkpoint's reward per Staked ETH token"
    rewardPerStakedEthToken: BigDecimal!
}
