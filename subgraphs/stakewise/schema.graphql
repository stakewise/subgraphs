"""
Pool settings
"""
type Pool @entity {
    "Pool contract address"
    id: ID!

    "The minimal deposit amount considered for the activation"
    minActivatingDeposit: BigDecimal!

    "The pending validators limit percentage. When it's exceeded, the deposits will be set for the activation"
    pendingValidatorsLimit: Int!

    "The total amount of pending validators"
    pendingValidators: Int!

    "The total amount of activated validators"
    activatedValidators: Int!
}

"""
Global Settings
"""
type Settings @entity {
    "Set to 1"
    id: ID!

    "Defines whether the Pool contract is paused"
    poolPaused: Boolean!

    "Defines whether the PoolValidators contract is paused"
    poolValidatorsPaused: Boolean!

    "Defines whether the MerkleDistributor contract is paused"
    merkleDistributorPaused: Boolean!

    "Defines whether the VestingEscrowFactory contract is paused"
    vestingEscrowFactoryPaused: Boolean!

    "Defines whether the Oracles contract is paused"
    oraclesPaused: Boolean!
}

"""
Pool deposit activation
"""
type DepositActivation @entity {
    "Set to `account-validatorIndex`"
    id: ID!

    "The address of the account that has pending activation"
    account: Bytes!

    "The validator index that is handling the deposit"
    validatorIndex: Int!

    "The amount that will be activated"
    amount: BigDecimal!
}

"""
StakeWise Operator
"""
type Operator @entity {
    "The operator address"
    id: ID!

    "The initialize merkle root used to verify validator registration initialization"
    initializeMerkleRoot: Bytes!

    "The initialize merkle root proofs link"
    initializeMerkleProofs: String!

    "The finalize merkle root used to verify validator registration finalization"
    finalizeMerkleRoot: Bytes!

    "The finalize merkle root proofs link"
    finalizeMerkleProofs: String!

    "The collateral amount deposited for ensuring the validator registration process"
    collateral: BigDecimal!

    "The operator validators"
    validators: [Validator!] @derivedFrom(field: "operator")
}

"""
StakeWise Oracle
"""
type Oracle @entity {
    "The oracle address"
    id: ID!

    "The oracle votes source"
    votesSource: String!
}

"""
Enum to track status of the validator registration.
Uninitialized - validator has not been initialized.
Initialized - 1 ether deposit has been made to the ETH2 registration contract for the public key.
Finalized - 31 ether deposit has been made to the ETH2 registration contract for the public key.
Failed - 1 ether deposit has failed as it was assigned to the different from the protocol's withdrawal key.
"""
enum RegistrationStatus { Uninitialized, Initialized, Finalized, Failed }

"""
StakeWise Validator
"""
type Validator @entity {
    "The validator public key"
    id: ID!

    "The validator operator"
    operator: Operator!

    "The validator registration status"
    registrationStatus: RegistrationStatus!
}

"""
Merkle Distributor settings
"""
type MerkleDistributor @entity {
    "MerkleDistributor contract address"
    id: ID!

    "The current merkle root"
    merkleRoot: Bytes!

    "The current merkle root proofs location"
    merkleProofs: String!

    "The current merkle root update block number"
    updatedAtBlock: Int!

    "The current merkle root update timestamp"
    updatedAtTimestamp: Int!
}

"""
Tokens distribution of the Merkle Distributor
"""
type TokenDistribution @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The address of the token to distribute"
    token: Bytes!

    "The address of the beneficiary"
    beneficiary: Bytes!

    "The amount to distribute"
    amount: BigDecimal!

    "The distribution start block number"
    startedAtBlock: Int!

    "The distribution start timestamp"
    startedAtTimestamp: Int!

    "The distribution end block number"
    endedAtBlock: Int!
}

"""
Tokens claim from the Merkle Distributor
"""
type MerkleDistributorClaim @entity {
    "Set to `account address - merkle root`"
    id: ID!

    "The address of the beneficiary"
    account: Bytes!

    "The merkle root of the claim"
    merkleRoot: Bytes!

    "The proofs of the merkle root"
    merkleProofs: String!
}

"""
The vesting escrow
"""
type VestingEscrow @entity {
    "The address of the vesting escrow contract"
    id: ID!

    "The address of the escrow admin"
    admin: Bytes!

    "The address of the distributed token"
    token: Bytes!

    "The address of the tokens claimer"
    claimer: Bytes!

    "The address of the tokens beneficiary"
    beneficiary: Bytes!

    "The total amount of tokens locked"
    totalAmount: BigDecimal!

    "The total amount of tokens claimed"
    totalClaimed: BigDecimal!

    "The vesting start timestamp"
    startTimestamp: Int!

    "The vesting end timestamp"
    endTimestamp: Int!

    "The cliff length"
    cliffLength: Int!

    "Defines whether the contract is paused"
    isPaused: Boolean!
}
