"""
Pool settings
"""
type Pool @entity {
    "Pool contract address"
    id: ID!

    "The minimal deposit amount considered for the activation"
    minActivatingDeposit: BigInt!

    "The pending validators limit percentage. When it's exceeded, the deposits will be set for the activation"
    pendingValidatorsLimit: BigInt!

    "The total amount of pending validators"
    pendingValidators: BigInt!

    "The total amount of activated validators"
    activatedValidators: BigInt!

    "The total amount of ETH staked"
    totalStaked: BigInt!

    "The total amount of unregistered ETH"
    balance: BigInt!
}

"""
StakeWise network global settings
"""
type Network @entity {
    "Set to 1"
    id: ID!

    "Defines whether the Pool contract is paused"
    poolPaused: Boolean!

    "Defines whether the PoolValidators contract is paused"
    poolValidatorsPaused: Boolean!

    "Defines whether the MerkleDistributor contract is paused"
    merkleDistributorPaused: Boolean!

    "Defines whether the VestingEscrowFactory contract is paused"
    vestingEscrowFactoryPaused: Boolean!

    "Defines whether the Oracles contract is paused"
    oraclesPaused: Boolean!

    "Defines whether the Roles contract is paused"
    rolesPaused: Boolean!

    "Defines whether the StakeWise Token is paused"
    stakeWiseTokenPaused: Boolean!

    "Defines whether the Staked ETH Token is paused"
    stakedEthTokenPaused: Boolean!

    "Defines whether the Reward ETH Token is paused"
    rewardEthTokenPaused: Boolean!

    "Defines rewards nonce in Oracles contract"
    oraclesRewardsNonce: BigInt!

    "Defines validators nonce in Oracles contract"
    oraclesValidatorsNonce: BigInt!
}

"""
Pool deposit activation
"""
type DepositActivation @entity {
    "Set to `account-validatorIndex`"
    id: ID!

    "The address of the account that has pending activation"
    account: Bytes!

    "The validator index that is handling the deposit"
    validatorIndex: BigInt!

    "The amount that will be activated"
    amount: BigInt!

    "The creation block number"
    createdAtBlock: BigInt!

    "The creation timestamp"
    createdAtTimestamp: BigInt!
}

"""
StakeWise Operator keys allocation
"""
type OperatorAllocation @entity {
    "Set to `operator.id-operator.allocationsCount`"
    id: ID!

    "The operator"
    operator: Operator!

    "The allocation's total number of staked validators"
    validatorsCount: BigInt!
}

"""
StakeWise Operator
"""
type Operator @entity {
    "The operator address"
    id: ID!

    "The deposit data merkle root used to verify validator registration"
    depositDataMerkleRoot: Bytes!

    "The deposit data merkle root proofs link"
    depositDataMerkleProofs: String!

    "Defines whether operator has committed the readiness to host the validators"
    committed: Boolean!

    "The operator's current available deposit data index"
    depositDataIndex: BigInt!

    "The operator's total number of the validators"
    validatorsCount: BigInt!

    "The configured revenue share - up to 10000 (100.00%)"
    revenueShare: BigInt!

    "The distributor points are used to calculate period rewards"
    distributorPoints: BigInt!

    "The last update block number"
    updatedAtBlock: BigInt!

    "The last update timestamp"
    updatedAtTimestamp: BigInt!

    "The total number of validator keys allocations"
    allocationsCount: BigInt!

    "The operator validators"
    validators: [Validator!]! @derivedFrom(field: "operator")

    "The operator keys allocations"
    allocations: [OperatorAllocation!]! @derivedFrom(field: "operator")
}

"""
StakeWise Oracle
"""
type Oracle @entity {
    "The oracle address"
    id: ID!
}

"""
StakeWise Validator
"""
type Validator @entity {
    "The validator public key"
    id: ID!

    "The validator operator"
    operator: Operator!

    "The creation block number"
    createdAtBlock: BigInt!

    "The creation timestamp"
    createdAtTimestamp: BigInt!
}

"""
Merkle Distributor settings
"""
type MerkleDistributor @entity {
    "MerkleDistributor contract address"
    id: ID!

    "The current merkle root"
    merkleRoot: Bytes!

    "The current merkle root proofs location"
    merkleProofs: String!

    "The last synced rewards update block"
    rewardsUpdatedAtBlock: BigInt!

    "The current merkle root update block number"
    updatedAtBlock: BigInt!

    "The current merkle root update timestamp"
    updatedAtTimestamp: BigInt!
}

"""
RewardEthToken contract settings
"""
type RewardEthToken @entity {
    "RewardEthToken contract address"
    id: ID!

    "The current reward per staked ETH token"
    rewardPerStakedEthToken: BigInt!

    "Distributor period reward"
    distributorPeriodReward: BigInt!

    "Protocol period reward"
    protocolPeriodReward: BigInt!

    "Total rewards"
    totalRewards: BigInt!

    "Total fees accumulated from priority fees and MEV"
    totalFees: BigInt!

    "The current rewards update block number"
    updatedAtBlock: BigInt!

    "The current rewards update timestamp"
    updatedAtTimestamp: BigInt!

    "The total number of staking reward updates"
    updatesCount: BigInt!
}

"""
Distributor merkle root update snapshot
"""
type MerkleRootSnapshot @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The merkle root"
    merkleRoot: Bytes!

    "The merkle proofs"
    merkleProofs: String!

    "The rewards update block number"
    rewardsUpdateAtBlock: BigInt!

    "The creation block number"
    createdAtBlock: BigInt!

    "The creation timestamp"
    createdAtTimestamp: BigInt!
}

"""
Staking rewards update snapshot
"""
type StakingRewardsSnapshot @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "Total rewards earned"
    periodTotalRewards: BigInt!

    "Protocol rewards earned"
    periodProtocolRewards: BigInt!

    "The duration of the update period"
    periodDuration: BigInt!

    "The total amount staked at the time of update"
    totalStaked: BigInt!

    "The update block number"
    createdAtBlock: BigInt!

    "The update timestamp"
    createdAtTimestamp: BigInt!
}

"""
Tokens periodic distribution through the Merkle Distributor
"""
type PeriodicDistribution @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The address of the token to distribute"
    token: Bytes!

    "The address of the beneficiary"
    beneficiary: Bytes!

    "The amount to distribute"
    amount: BigInt!

    "The distribution start block number"
    startedAtBlock: BigInt!

    "The distribution start timestamp"
    startedAtTimestamp: BigInt!

    "The distribution end block number"
    endedAtBlock: BigInt!
}

"""
Tokens one time distribution through the Merkle Distributor
"""
type OneTimeDistribution @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The address of the token to distribute"
    token: Bytes!

    "The pre-defined address of the distribution origin to distinguish among others"
    origin: Bytes!

    "The amount to distribute"
    amount: BigInt!

    "The link to the rewards distribution file"
    rewardsLink: String!

    "The distribution block number"
    distributedAtBlock: BigInt!

    "The distribution timestamp"
    distributedAtTimestamp: BigInt!
}

"""
Tokens claim from the Merkle Distributor
"""
type MerkleDistributorClaim @entity {
    "Set to `account address - merkle root`"
    id: ID!

    "The address of the beneficiary"
    account: Bytes!

    "The merkle root of the claim"
    merkleRoot: Bytes!

    "The proofs of the merkle root"
    merkleProofs: String!
}

"""
The vesting escrow
"""
type VestingEscrow @entity {
    "The address of the vesting escrow contract"
    id: ID!

    "The address of the escrow admin"
    admin: Bytes!

    "The address of the distributed token"
    token: Bytes!

    "The address of the tokens claimer"
    claimer: Bytes!

    "The address of the tokens beneficiary"
    beneficiary: Bytes!

    "The total amount of tokens locked"
    totalAmount: BigInt!

    "The total amount of tokens claimed"
    totalClaimed: BigInt!

    "The vesting start timestamp"
    startTimestamp: BigInt!

    "The vesting end timestamp"
    endTimestamp: BigInt!

    "The cliff length"
    cliffLength: BigInt!

    "Defines whether the contract is paused"
    isPaused: Boolean!
}

"""
StakeWise token holder
"""
type StakeWiseTokenHolder @entity {
    "The address of the StakeWise token holder"
    id: ID!

    "Defines whether the holder is a smart contract"
    isContract: Boolean!

    "The holder's balance"
    balance: BigInt!

    "The distributor points are used to calculate period rewards"
    distributorPoints: BigInt!

    "The last update block number"
    updatedAtBlock: BigInt!

    "The last update timestamp"
    updatedAtTimestamp: BigInt!
}

"""
StakeWise Staker
"""
type Staker @entity {
    "The staker address"
    id: ID!

    "Defines whether rewards accrual is disabled"
    rewardsDisabled: Boolean!

    "Defines whether the staker is a smart contract"
    isContract: Boolean!

    "The staked ETH tokens balance"
    principalBalance: BigInt!

    "The last checkpoint reward ETH tokens balance"
    rewardBalance: BigInt!

    "The last checkpoint reward per staked ETH token"
    rewardPerStakedEthToken: BigInt!
}

"""
StakeWise Partner
"""
type Partner @entity {
    "The partner address"
    id: ID!

    "The total amount of ETH contributed"
    contributedAmount: BigInt!

    "The configured revenue share - up to 10000 (100.00%)"
    revenueShare: BigInt!

    "The distributor points are used to calculate period rewards"
    distributorPoints: BigInt!

    "The last update block number"
    updatedAtBlock: BigInt!

    "The last update timestamp"
    updatedAtTimestamp: BigInt!
}

"""
StakeWise Referral
"""
type Referral @entity {
    "Set to `transaction hash-log index`"
    id: ID!

    "The referrer address"
    referrer: Bytes!

    "The amount deposited"
    amount: BigInt!

    "The creation block number"
    createdAtBlock: BigInt!

    "The creation timestamp"
    createdAtTimestamp: BigInt!
}


"""
Distributor Redirect
"""
type DistributorRedirect @entity {
    "The address that redirects to token"
    id: ID!

    "The distributor token that it redirects to"
    token: DistributorToken!
}


"""
Distributor Token
"""
type DistributorToken @entity {
    "Set to `token address`"
    id: ID!

    "An array of addresses that redirect rewards to this token"
    redirectedFrom: [DistributorRedirect!]! @derivedFrom(field: "token")
}

"""
Merkle Distributor Token holder
"""
type DistributorTokenHolder @entity {
    "Set to `distributor token ID - account address`"
    id: ID!

    "The address of the ERC20 token for the rewards distribution"
    token: Bytes!

    "The address of the token holder"
    account: Bytes!

    "The amount of tokens used for distributor points calculation"
    amount: BigInt!

    "The distributor points are used to calculate reward"
    distributorPoints: BigInt!

    "The last update block number"
    updatedAtBlock: BigInt!

    "The last update timestamp"
    updatedAtTimestamp: BigInt!
}
